{"version":3,"file":"StudentEdge.js","sourceRoot":"","sources":["../../../../test/env/edges/StudentEdge.ts"],"names":[],"mappings":";;;AAAA,6DAAwD;AACxD,8CAAyC;AACzC,2CAAsC;AAEtC,kEAA6D;AAC7D,gEAA+D;AAC/D,iFAA4E;AAC5E,mEAA2F;AAC3F,iEAA4D;AAC5D,yEAAoE;AAEpE,MAAa,WAAY,SAAQ,qBAAkB;IA2B/C;QACI,KAAK,EAAE,CAAC;QA3BZ,SAAI,GAAG,SAAS,CAAC;QACjB,eAAU,GAAG,UAAU,CAAC;QAExB,WAAM,GAAG,IAAI,6BAAa,CAAC;YACvB,EAAE,EAAE,GAAG;YACP,QAAQ,EAAE,IAAI,2CAA2B,CACrC,CAAC,MAAW,EAAE,KAAU,EAAE,EAAE;gBACxB,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzC,IAAG,KAAK,CAAC,MAAM,IAAI,CAAC;oBAAE,MAAM,IAAI,2BAAY,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;gBACvE,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3B,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YAC7B,CAAC,EACD,CAAC,KAAU,EAAE,MAAW,EAAE,EAAE;gBACxB,MAAM,CAAC,QAAQ,GAAG,CAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACnE,CAAC,EACD,CAAE,WAAW,EAAE,UAAU,CAAE,EAC3B,MAAM,CACT;YACD,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,GAAG;SACf,CAAC,CAAC;QAEH,aAAQ,GAAG,iCAAe,CAAC,QAAQ,CAAC;QAC1B,gBAAW,GAAG,CAAC,GAAQ,EAAW,EAAE,CAAC,IAAI,iBAAO,CAAC,GAAG,CAAC,CAAC;QAK5D,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAoB,EAAiC,EAAE,CAC/E,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC5B,CAAC,IAAI,2BAAY,CAAC,IAAI,EAAE,mCAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE;YAC3D,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;SAC3D,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,EAAE,2BAAc,CAAC,MAAM,CAAC,CAAC;QAErE,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,KAAoB,EAAiC,EAAE;YAC1F,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;gBACzB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC/E,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxE,OAAO,CAAC,IAAI,2CAAoB,CAAC,OAAO,CAAC,CAAC,CAAA;YAC9C,CAAC,CAAC,CAAA;QACN,CAAC,EAAE,2BAAc,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;CACJ;AA5CD,kCA4CC","sourcesContent":["import {RawDataProvider} from \"../data/RawDataProvider\";\nimport {Student} from \"../model/Student\";\nimport {ModelEdge} from \"./ModelEdge\";\nimport {ApiQueryScope} from \"../../../src/query/ApiQuery\";\nimport {ApiEdgeError} from \"../../../src/query/ApiEdgeError\";\nimport {ApiRequestType} from \"../../../src/request/ApiRequest\";\nimport {ApiEdgeQueryResponse} from \"../../../src/edge/ApiEdgeQueryResponse\";\nimport {ApiEdgeSchema, ApiEdgeSchemaTransformation} from \"../../../src/edge/ApiEdgeSchema\";\nimport {ApiEdgeQuery} from \"../../../src/edge/ApiEdgeQuery\";\nimport {ApiEdgeQueryType} from \"../../../src/edge/ApiEdgeQueryType\";\n\nexport class StudentEdge extends ModelEdge<Student> {\n    name = \"student\";\n    pluralName = \"students\";\n\n    schema = new ApiEdgeSchema({\n        id: \"=\",\n        fullName: new ApiEdgeSchemaTransformation(\n            (schema: any, model: any) => {\n                const parts = schema.fullName.split(' ');\n                if(parts.length != 2) throw new ApiEdgeError(400, \"Invalid full name\");\n                model.firstName = parts[0];\n                model.lastName = parts[1]\n            },\n            (model: any, schema: any) => {\n                schema.fullName = [ model.firstName, model.lastName ].join(' ')\n            },\n            [ \"firstName\", \"lastName\" ],\n            String\n        ),\n        email: \"=\",\n        schoolId: \"=\",\n        classId: \"=\"\n    });\n\n    provider = RawDataProvider.students;\n    protected createModel = (obj: any): Student => new Student(obj);\n\n    constructor() {\n        super();\n\n        this.entryMethod(\"rename\", (scope: ApiQueryScope): Promise<ApiEdgeQueryResponse> =>\n            new Promise((resolve, reject) =>\n                (new ApiEdgeQuery(this, ApiEdgeQueryType.Patch, scope.context, {\n                    fullName: scope.body.name.split(' ').reverse().join(' ')\n                })).execute().then(resolve, reject)), ApiRequestType.Change);\n\n        this.entryMethod(\"withHungarianName\", (scope: ApiQueryScope): Promise<ApiEdgeQueryResponse> => {\n            return new Promise(resolve => {\n                const student = JSON.parse(JSON.stringify((scope.response || {} as any).data));\n                student.hungarianName = student.fullName.split(' ').reverse().join(' ');\n                resolve(new ApiEdgeQueryResponse(student))\n            })\n        }, ApiRequestType.Read)\n    }\n}\n"]}