{"version":3,"file":"ApiQuery.js","sourceRoot":"","sources":["../../../src/query/ApiQuery.ts"],"names":[],"mappings":";;;AAAA,qEAAgE;AAChE,uEAAkE;AAElE,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAkBhC,MAAa,QAAQ;IAKjB;QAFA,UAAK,GAAgB,EAAE,CAAC;QAMxB,YAAO,GAAG,CAAC,IAAe,EAAY,EAAE;YACpC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,OAAO,IAAI,CAAA;QACf,CAAC,CAAC;QAOF,YAAO,GAAG,CAAC,WAAgB,IAAI,EAAiC,EAAE;YAC9D,OAAO,IAAI,OAAO,CAAuB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzD,IAAI,IAAI,GAAG,CAAC,KAAoB,EAAE,EAAE;oBAChC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAG,IAAI,EAAE;wBACL,KAAK,CAAC,IAAI,EAAE,CAAC;wBACb,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;4BAChC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;yBAChD;6BACI;4BACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;yBAC9G;qBACJ;gBACL,CAAC,CAAC;gBAEF,IAAI,CAAC;oBACD,OAAO,EAAE,IAAI,yCAAmB,EAAE;oBAClC,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI;oBACd,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC;oBACP,QAAQ;iBACX,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC,CAAA;QAtCG,IAAI,CAAC,EAAE,GAAG,IAAI,EAAE,CAAA;IACpB,CAAC;CAsCJ;AA7CD,4BA6CC","sourcesContent":["import {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\nimport {ApiRequest} from \"../request/ApiRequest\";\nconst uuid = require('uuid/v4');\n\n\nexport interface ApiQueryScope {\n    context: ApiEdgeQueryContext,\n    body: any|null,\n    stream?: NodeJS.ReadableStream|null,\n    identity: any|null,\n    response: ApiEdgeQueryResponse|null,\n    query: ApiQuery,\n    request: ApiRequest,\n    step: number\n}\n\nexport interface QueryStep {\n    execute(scope: ApiQueryScope): Promise<ApiQueryScope>;\n}\n\nexport class ApiQuery {\n    readonly id: string;\n    request: ApiRequest;\n    steps: QueryStep[] = [];\n\n    constructor() {\n        this.id = uuid()\n    }\n\n    unshift = (step: QueryStep): ApiQuery => {\n        this.steps.unshift(step);\n        return this\n    };\n\n/*    push = (step: QueryStep): ApiQuery => {\n        this.steps.push(step);\n        return this\n    };*/\n\n    execute = (identity: any = null): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let next = (scope: ApiQueryScope) => {\n                let step = this.steps[scope.step];\n                if(step) {\n                    scope.step++;\n                    if (scope.step < this.steps.length) {\n                        step.execute(scope).then(next).catch(reject);\n                    }\n                    else {\n                        step.execute(scope).then(scope => resolve(scope.response || new ApiEdgeQueryResponse(null))).catch(reject);\n                    }\n                }\n            };\n\n            next({\n                context: new ApiEdgeQueryContext(),\n                body: null,\n                request: this.request,\n                response: null,\n                query: this,\n                step: 0,\n                identity\n            });\n        })\n    }\n}\n"]}