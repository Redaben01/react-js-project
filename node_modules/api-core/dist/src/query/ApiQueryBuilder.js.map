{"version":3,"file":"ApiQueryBuilder.js","sourceRoot":"","sources":["../../../src/query/ApiQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiQuery, ApiQueryScope, QueryStep} from \"./ApiQuery\";\nimport {ApiEdgeQuery} from \"../edge/ApiEdgeQuery\";\nimport {ApiEdgeQueryContext} from \"../edge/ApiEdgeQueryContext\";\nimport {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiEdgeError} from \"./ApiEdgeError\";\nimport {ApiEdgeQueryFilter, ApiEdgeQueryFilterType} from \"../edge/ApiEdgeQueryFilter\";\nimport {\n    ApiRequest,\n    ApiRequestType,\n    EdgePathSegment,\n    EntryPathSegment,\n    MethodPathSegment,\n    PathSegment,\n    RelatedFieldPathSegment\n} from \"../request/ApiRequest\";\nimport {ApiEdgeQueryResponse} from \"../edge/ApiEdgeQueryResponse\";\nimport {ApiEdgeQueryType} from \"../edge/ApiEdgeQueryType\";\nimport {OneToOneRelation} from \"../relations/OneToOneRelation\";\nimport {Api} from \"../Api\";\nimport {ApiEdgeMethod, ApiEdgeMethodOutput, ApiEdgeMethodScope} from \"../edge/ApiEdgeMethod\";\nimport {ApiEdgeAction, ApiEdgeActionTrigger, ApiEdgeActionTriggerKind} from \"../edge/ApiEdgeAction\";\nimport {ApiAction, ApiActionTriggerKind} from \"./ApiAction\";\nimport {ApiEdgeDefinition} from \"../edge/ApiEdgeDefinition\";\nimport {OneToManyRelation} from \"../relations/OneToManyRelation\";\n\nconst parse = require('obj-parse');\nconst debug = require('debug')('api-core');\n\nexport class EmbedQueryQueryStep implements QueryStep {\n    query: ApiQuery;\n    request: ApiRequest;\n    segment: PathSegment;\n    sourceField: string;\n    targetField: string;\n    idField: string;\n    forceArray: boolean;\n    isMultiMulti: boolean;\n\n    constructor(query: ApiQuery, segment: PathSegment, request: ApiRequest) {\n        this.query = query;\n        this.query.request = this.request = request;\n        this.segment = segment;\n\n        if(!this.segment.relation) throw new Error('Invalid relation provided.');\n        this.sourceField = this.segment.relation.relationId;\n        this.targetField = this.segment.relation.name;\n        this.idField = this.segment.relation.relatedId;\n        this.forceArray = this.segment.relation instanceof OneToManyRelation;\n        this.isMultiMulti = this.segment.relation.hasPair;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n            if(scope.response) {\n                const target = scope.response.data;\n\n                if(Array.isArray(target)) {\n                    const targetIndex: { [key: string]: any[] } = {},\n                        targetArrayIndex: { [key: string]: { entry: any, index: number }[] } = {},\n                        ids: string[] = [];\n\n                    for(let entry of target) {\n                        const id = entry[this.sourceField];\n                        if(id) {\n                            if(Array.isArray(id)) {\n                                let index = 0;\n                                for(let _id of id) {\n                                    if (targetArrayIndex[_id]) targetArrayIndex[_id].push({ entry, index });\n                                    else targetArrayIndex[_id] = [{entry, index}];\n                                    ids.push(_id);\n                                    index++\n                                }\n                                entry[this.sourceField] = [];\n                            }\n                            else {\n                                if (targetIndex[id]) targetIndex[id].push(entry);\n                                else targetIndex[id] = [entry];\n                                ids.push(id);\n                                if (this.forceArray)\n                                    entry[this.targetField] = [];\n                            }\n                        }\n                    }\n\n                    this.request.context.filters = [\n                        new ApiEdgeQueryFilter(this.idField, ApiEdgeQueryFilterType.In, ids)\n                    ];\n\n                    this.query.execute(scope.identity).then((response) => {\n                        if(response.data && response.data.length) {\n                            for (let entry of response.data) {\n                                let ids = entry[this.idField];\n                                if(!Array.isArray(ids)) {\n                                    ids = [ids];\n                                }\n\n                                for(let id of ids) {\n                                    if (targetIndex[id]) {\n                                        for (let subEntry of targetIndex[id]) {\n                                            if (this.forceArray)\n                                                subEntry[this.targetField].push(entry);\n                                            else\n                                                subEntry[this.targetField] = entry;\n                                        }\n                                    }\n                                    if(targetArrayIndex[id]) {\n                                        for (let { entry: subEntry, index } of targetArrayIndex[id]) {\n                                            subEntry[this.targetField][index] = entry;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        resolve(scope)\n                    }).catch(reject);\n                }\n                else {\n                    const sourceId = target[this.sourceField];\n\n                    if(!sourceId) {\n                        resolve(scope);\n                        return\n                    }\n\n                    if(Array.isArray(sourceId)) {\n                        this.request.context.filters = [\n                            new ApiEdgeQueryFilter(this.idField, ApiEdgeQueryFilterType.In, sourceId)\n                        ];\n                    }\n                    else if(this.forceArray) {\n                        this.request.context.filters = [\n                            new ApiEdgeQueryFilter(this.idField, ApiEdgeQueryFilterType.Equals, sourceId)\n                        ];\n                    }\n                    else {\n                        //Now we can replace TBD and provide a real id for the query.\n                        (this.segment as EntryPathSegment).id = sourceId;\n                    }\n\n                    this.query.execute(scope.identity).then((response) => {\n                        if (Array.isArray(sourceId)) {  // restore original order of array items\n                            const unordered_data = response.data;\n                            response.data = [];\n                            for (const id of sourceId) {\n                                const item = unordered_data.find((item:any) => {\n                                    return item.id.toString() == id.toString();\n                                });\n                                if (item)\n                                    response.data.push(item);\n                                else\n                                    console.warn(\"WARNING: can\\'t find in embed results this id: \" + id);\n                            }\n                        }\n                        target[this.targetField] = response.data;\n                        resolve(scope)\n                    }).catch(e => {\n                        console.warn(e);\n                        resolve(scope)\n                    })\n                }\n            }\n            else resolve(scope)\n        })\n    };\n\n    inspect = () => `EMBED QUERY /${this.sourceField} -> ${this.targetField}`;\n}\n\nexport class QueryEdgeQueryStep implements QueryStep {\n    query: ApiEdgeQuery;\n\n    constructor(query: ApiEdgeQuery) {\n        this.query = query;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(this.query.type !== ApiEdgeQueryType.Get && this.query.type !== ApiEdgeQueryType.List) {\n                this.query.body = scope.body;\n            }\n\n            this.query.context = scope.context;\n            this.query.context.populatedRelations = []; // prevent embed step to run on external query --- it shall only run at the original executor\n            this.query.context.identity = scope.identity;\n\n            this.query.execute().then((response) => {\n                scope.context = new ApiEdgeQueryContext();\n                scope.response = response;\n                resolve(scope)\n            }).catch(reject);\n        })\n    };\n\n    inspect = () => `QUERY /${this.query.edge.pluralName}`;\n}\n\nexport class CallMethodQueryStep implements QueryStep {\n    method: ApiEdgeMethod;\n    edge: ApiEdgeDefinition;\n\n    constructor(method: ApiEdgeMethod, edge: ApiEdgeDefinition) {\n        this.method = method;\n        this.edge = edge;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n            scope.context.method = this.method.name;\n\n            this.method.execute(scope)\n                .then((response) => {\n                    scope.response = response;\n                    resolve(scope)\n                }).catch((e) => {\n                debug(`failed to execute ${this.method.name} method`, e);\n                reject(e)\n            });\n        })\n    };\n\n    inspect = () => `call{${this.method.name}}`;\n}\n\nexport class RelateQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relationId, ApiEdgeQueryFilterType.Equals, scope.response.data[this.relation.relatedId]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relationId} = ${this.relation.relatedId}`;\n}\n\nexport class RelateBackwardsQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relatedId, ApiEdgeQueryFilterType.Equals, scope.response.data[this.relation.relationId]);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relatedId} = ${this.relation.relationId}`;\n}\n\nexport class RelateChangeQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(!scope.body) return reject(new ApiEdgeError(404, \"Missing Body\"));\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            parse(this.relation.relationId).assign(\n                scope.body,\n                scope.response.data[this.relation.relatedId].toString());\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE CHANGE ${this.relation.relationId}`;\n}\n\nexport class RelateBackwardsChangeQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(!scope.body) return reject(new ApiEdgeError(404, \"Missing Body\"));\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            parse(this.relation.relatedId).assign(\n                scope.body,\n                scope.response.data[this.relation.relationId].toString());\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE CHANGE BACKWARD ${this.relation.relatedId}`;\n}\n\n/*export class CheckResponseQueryStep implements QueryStep {\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `CHECK`;\n}\n\nexport class NotImplementedQueryStep implements QueryStep {\n    description: string;\n\n    constructor(description: string) {\n        this.description = description;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `NOT IMPLEMENTED: ${this.description}`;\n}*/\n\nexport class SetResponseQueryStep implements QueryStep {\n    response: ApiEdgeQueryResponse;\n\n    constructor(response: ApiEdgeQueryResponse) {\n        this.response = response;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise(resolve => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            scope.response = this.response;\n            scope.context = new ApiEdgeQueryContext();\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET RESPONSE`;\n}\n\nexport class SetBodyQueryStep implements QueryStep {\n    body: any;\n    stream: NodeJS.ReadableStream|null;\n\n    constructor(body: any, stream: NodeJS.ReadableStream|null = null) {\n        this.body = body;\n        this.stream = stream\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise(resolve => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            scope.body = this.body;\n            scope.stream = this.stream;\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET BODY`;\n}\n\nexport class ProvideIdQueryStep implements QueryStep {\n    fieldName: string;\n\n    constructor(fieldName: string = Api.defaultIdField) {\n        this.fieldName = fieldName;\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise((resolve, reject) => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Entry\"));\n            scope.context.id = scope.response.data[this.fieldName];\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `PROVIDE ID: ${this.fieldName}`;\n}\n\nexport class ExtendContextQueryStep implements QueryStep {\n    context: ApiEdgeQueryContext;\n\n    constructor(context: ApiEdgeQueryContext) {\n        this.context = context\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise(resolve => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            scope.context.id = this.context.id || scope.context.id;\n            if(this.context.pagination) {\n                scope.context.pagination = this.context.pagination;\n            }\n            this.context.fields.forEach(f => scope.context.fields.push(f));\n            this.context.populatedRelations.forEach(f => scope.context.populatedRelations.push(f));\n            this.context.filters.forEach(f => scope.context.filters.push(f));\n            this.context.sortBy.forEach(f => scope.context.sortBy.push(f));\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        if(this.context.id) {\n            return `EXTEND CONTEXT (id=${this.context.id})`\n        }\n        else {\n            return `APPLY PARAMETERS`\n        }\n    };\n}\n\nexport class ExtendContextLiveQueryStep implements QueryStep {\n    apply: (context: ApiEdgeQueryContext) => void|any;\n\n    constructor(func: (context: ApiEdgeQueryContext) => void|any) {\n        this.apply = func\n    }\n\n    execute = (scope: ApiQueryScope): Promise<ApiQueryScope> => {\n        return new Promise(resolve => {\n            debug(`[${scope.query.id}]`, this.inspect());\n\n            this.apply(scope.context);\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        return `EXTEND CONTEXT LIVE`\n    };\n}\n\n/*export class GenericQueryStep implements QueryStep {\n    description: string;\n    step: () => Promise<QueryScope>;\n    context: any;\n\n    constructor(description: string, step: () => Promise<QueryScope>, context: any) {\n        this.description = description;\n        this.step = step;\n        this.context = context;\n    }\n\n    execute = (scope: QueryScope) => {\n        return this.step.apply(this.context, [ scope ]);\n    };\n\n    inspect = () => this.description\n}*/\n\nexport class ApiQueryBuilder {\n    api: Api;\n\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    private addQueryActions(triggerKind: ApiEdgeActionTriggerKind,\n                            query: ApiQuery,\n                            edgeQuery: ApiEdgeQuery,\n                            relation: ApiEdgeRelation|null,\n                            output: boolean = false) {\n        const edge = edgeQuery.edge,\n            queryType = edgeQuery.type,\n            trigger = relation ?\n                ApiEdgeActionTrigger.Relation :\n                (output ? ApiEdgeActionTrigger.OutputQuery : ApiEdgeActionTrigger.SubQuery);\n\n        let actions: ApiEdgeAction[];\n        if(relation) {\n            actions = edge.actions.filter((action: ApiEdgeAction) =>\n                action.triggerKind == triggerKind &&\n                (action.targetTypes & queryType) &&\n                (action.triggers & trigger) &&\n                (!action.triggerNames.length || action.triggerNames.indexOf(relation.name) == -1))\n        }\n        else {\n            actions = edge.actions.filter((action: ApiEdgeAction) =>\n                action.triggerKind == triggerKind &&\n                (action.targetTypes & queryType) &&\n                (action.triggers & trigger))\n        }\n\n        actions.forEach((action: ApiEdgeAction) => query.unshift(action));\n\n        if(output) {\n            const apiTrigger = triggerKind == ApiEdgeActionTriggerKind.BeforeEvent ?\n                ApiActionTriggerKind.BeforeOutput : ApiActionTriggerKind.AfterOutput;\n            this.api.actions\n                .filter((action: ApiAction) => action.triggerKind == apiTrigger)\n                .forEach((action: ApiAction) => query.unshift(action))\n        }\n    }\n\n    private addMethodActions(triggerKind: ApiEdgeActionTriggerKind,\n                            query: ApiQuery,\n                            method: ApiEdgeMethod,\n                            queryType: ApiEdgeQueryType,\n                            edge: ApiEdgeDefinition,\n                            output: boolean = false) {\n        const trigger = ApiEdgeActionTrigger.Method;\n\n        let actions = edge.actions.filter((action: ApiEdgeAction) =>\n            action.triggerKind == triggerKind &&\n            (action.targetTypes & queryType) &&\n            (action.triggers & trigger) &&\n            (!action.triggerNames.length || action.triggerNames.indexOf(method.name) == -1));\n\n        actions.forEach((action: ApiEdgeAction) => query.unshift(action));\n\n        if(output) {\n            const apiTrigger = triggerKind == ApiEdgeActionTriggerKind.BeforeEvent ?\n                ApiActionTriggerKind.BeforeOutput : ApiActionTriggerKind.AfterOutput;\n            this.api.actions\n                .filter((action: ApiAction) => action.triggerKind == apiTrigger)\n                .forEach((action: ApiAction) => query.unshift(action))\n        }\n    }\n\n    private addMethodCallStep(request: ApiRequest, query: ApiQuery, method: ApiEdgeMethod, edge: ApiEdgeDefinition, output: boolean) {\n        if(method.acceptedTypes & request.type) {\n            let queryType = ApiEdgeQueryType.Any;\n            if (request.type === ApiRequestType.Create) {\n                queryType = ApiEdgeQueryType.Create;\n            } else if (request.type === ApiRequestType.Read) {\n                queryType = ApiEdgeQueryType.Read;\n            } else if (request.type === ApiRequestType.Update) {\n                queryType = ApiEdgeQueryType.Update;\n            } else if (request.type === ApiRequestType.Patch) {\n                queryType = ApiEdgeQueryType.Patch;\n            } else if (request.type === ApiRequestType.Delete) {\n                queryType = ApiEdgeQueryType.Delete;\n            } else if (request.type === ApiRequestType.Exists) {\n                queryType = ApiEdgeQueryType.Exists;\n            } else if (request.type === ApiRequestType.Change) {\n                queryType = ApiEdgeQueryType.Change;\n            }\n\n            this.addMethodActions(ApiEdgeActionTriggerKind.AfterEvent, query, method, queryType, edge, output);\n            query.unshift(new CallMethodQueryStep(method, edge));\n            this.addMethodActions(ApiEdgeActionTriggerKind.BeforeEvent, query, method, queryType, edge, output)\n        }\n        else {\n            throw new ApiEdgeError(405, \"Method Not Allowed\");\n        }\n    }\n\n    private addQueryStep(query: ApiQuery,\n                         step: QueryEdgeQueryStep,\n                         relation: ApiEdgeRelation|null = null,\n                         output: boolean = false) {\n        this.addQueryActions(ApiEdgeActionTriggerKind.AfterEvent, query, step.query, relation, output);\n        query.unshift(step);\n        this.addQueryActions(ApiEdgeActionTriggerKind.BeforeEvent, query, step.query, relation, output);\n    }\n\n    private static buildProvideIdStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = currentSegment.id));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(currentSegment.relation.relationId));\n            return true\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n            return false\n        }\n    }\n\n    private buildCheckStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the check query.\n        //TODO: Check this code...\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new SetResponseQueryStep(new ApiEdgeQueryResponse({ [currentSegment.edge.idField||Api.defaultIdField]: currentSegment.id })));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)), currentSegment.relation);\n        }\n        else {\n            //TODO: Add support for method calls (non-base query case)\n            throw new ApiEdgeError(500, \"Not Implemented\")\n        }\n\n        //STEP 2: Provide ID for the check query.\n        return ApiQueryBuilder.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the read query.\n        if(currentSegment instanceof RelatedFieldPathSegment) {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)), currentSegment.relation);\n        }\n        else {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.edge, ApiEdgeQueryType.Get)));\n        }\n\n        //STEP 2: Provide ID for the read query.\n        return ApiQueryBuilder.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildEmbedSteps(query: ApiQuery, request: ApiRequest, lastSegment: PathSegment) {\n        if(request.type === ApiRequestType.Read\n            && (lastSegment instanceof EdgePathSegment\n                || (lastSegment instanceof MethodPathSegment && lastSegment.method.output === ApiEdgeMethodOutput.List))) {\n            for (let relation of request.context.populatedRelations) {\n                const segment = new EdgePathSegment(relation.to, relation);\n\n                const embedRequest = new ApiRequest(request.api);\n                embedRequest.path.add(segment);\n\n                // We add the step directly directly, as pre- and post-actions are not\n                // supported on embed query steps. These actions will be executed as\n                // part of the sub-query.\n                query.unshift(new EmbedQueryQueryStep(this.build(embedRequest), segment, embedRequest));\n            }\n        }\n        else {\n            for (let relation of request.context.populatedRelations) {\n                let segment: EdgePathSegment|EntryPathSegment;\n\n                if(relation instanceof OneToManyRelation) {\n                    // TODO: Should we specify exactly array relations?\n                    segment = new EdgePathSegment(relation.to, relation);\n                }\n                else {\n                    // The id is literally TBD, it is going to be set once we have the data,\n                    // what we build now is only an execution plan.\n                    segment = new EntryPathSegment(relation.to, 'TBD', relation);\n                }\n\n                const embedRequest = new ApiRequest(request.api);\n                embedRequest.path.add(segment);\n\n                // We add the step directly, as pre- and post-actions are not\n                // supported on embed query steps. These actions will be executed as\n                // part of the sub-query.\n                query.unshift(new EmbedQueryQueryStep(this.build(embedRequest), segment, embedRequest));\n            }\n        }\n    }\n\n    private buildReadQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        let readMode = true;\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof EdgePathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.List);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Get);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), lastSegment.relation, true);\n\n        }\n        else if(lastSegment instanceof MethodPathSegment) {\n            this.addMethodCallStep(request, query, lastSegment.method, lastSegment.edge, true);\n            if(lastSegment.method.scope === ApiEdgeMethodScope.Entry) {\n                //TODO: Add support for providing id for Edge methods.\n                query.unshift(new ProvideIdQueryStep(lastSegment.edge.idField));\n            }\n            readMode = lastSegment.method.requiresData;\n        }\n        else {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Get);\n            this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n        }\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            const _segment = lastSegment; //Add closure to make sure it won't be overridden later.\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = _segment.id))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(lastSegment.relation.relatedId !== lastSegment.relation.to.idField) {\n                query.unshift(new RelateBackwardsQueryStep(lastSegment.relation));\n            }\n            else {\n                query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n            }\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            let edge = segments[i+1].edge;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                if(edge === relation.to) {\n                    query.unshift(new RelateBackwardsQueryStep(relation));\n                }\n                else {\n                    query.unshift(new RelateQueryStep(relation));\n                }\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 6: Return the completed query.\n        return query\n    };\n\n    private buildChangeQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1],\n            readMode = true;\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n                request.body = { [lastSegment.relation.relationId]: request.body.id||request.body._id };\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Patch);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else {\n                throw new ApiEdgeError(400, \"Invalid Delete Query\");\n            }\n        }\n        else if(lastSegment instanceof MethodPathSegment) {\n            this.addMethodCallStep(request, query, lastSegment.method, lastSegment.edge, true);\n            if(lastSegment.method.scope === ApiEdgeMethodScope.Entry) {\n                //TODO: Add support for providing id for Edge methods.\n                query.unshift(new ProvideIdQueryStep(lastSegment.edge.idField));\n            }\n            readMode = lastSegment.method.requiresData;\n        }\n        else {\n            if(request.type === ApiRequestType.Update) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Update);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else if(request.type === ApiRequestType.Patch) {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Patch);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n            else {\n                baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Delete);\n                this.addQueryStep(query, new QueryEdgeQueryStep(baseQuery), null, true);\n            }\n        }\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            const _segment = lastSegment; //Add closure to make sure it won't be overridden later.\n            query.unshift(new ExtendContextLiveQueryStep(context => context.id = _segment.id))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            if(request.type === ApiRequestType.Update) {\n                let previousSegment = segments[segments.length-2];\n                query.unshift(new ProvideIdQueryStep(previousSegment.edge.idField||Api.defaultIdField));\n                readMode = false; //Provide ID from the previous segment without querying the database.\n            }\n            else {\n                query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n            }\n        }\n        else {\n            //TODO: Add support for method calls with parameters\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            let edge = segments[i+1].edge;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                if(edge === relation.to) {\n                    query.unshift(new RelateBackwardsQueryStep(relation));\n                }\n                else {\n                    query.unshift(new RelateQueryStep(relation));\n                }\n\n                if(request.type !== ApiRequestType.Delete) {\n                    if(edge === relation.to) {\n                        query.unshift(new RelateBackwardsChangeQueryStep(relation))\n                    }\n                    else {\n                        query.unshift(new RelateChangeQueryStep(relation))\n                    }\n                }\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Provide body for the query\n        if(request.body || request.stream)\n            query.unshift(new SetBodyQueryStep(request.body, request.stream));\n\n        //STEP 6: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 7: Return the completed query.\n        return query\n    };\n\n    private buildCreateQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1],\n            readMode = true;\n\n        //STEP 0: Create embed queries\n        this.buildEmbedSteps(query, request, lastSegment);\n\n        //STEP 1: Create the base query which will provide the final data.\n        if(lastSegment instanceof MethodPathSegment) {\n            this.addMethodCallStep(request, query, lastSegment.method, lastSegment.edge, true);\n            if(lastSegment.method.scope === ApiEdgeMethodScope.Entry) {\n                //TODO: Add support for providing id for Edge methods.\n                query.unshift(new ProvideIdQueryStep(lastSegment.edge.idField));\n            }\n            readMode = lastSegment.method.requiresData;\n        }\n        else {\n            this.addQueryStep(query, new QueryEdgeQueryStep(new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Create)));\n        }\n\n        //STEP 2: Provide filters and validation for the base query.\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            let edge = segments[i+1].edge;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                if(edge === relation.to) {\n                    query.unshift(new RelateBackwardsChangeQueryStep(relation))\n                }\n                else {\n                    query.unshift(new RelateChangeQueryStep(relation))\n                }\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 3: Provide context for the base query.\n        query.unshift(new SetBodyQueryStep(request.body, request.stream));\n\n        //STEP 4: Add OnInput actions\n        this.api.actions\n            .filter((action: ApiAction) => action.triggerKind == ApiActionTriggerKind.OnInput)\n            .forEach((action: ApiAction) => query.unshift(action));\n\n        //STEP 5: Return the completed query.\n        return query\n    };\n\n\n    build = (request: ApiRequest): ApiQuery => {\n        switch(request.type) {\n            case ApiRequestType.Read:\n                return this.buildReadQuery(request);\n            case ApiRequestType.Update:\n            case ApiRequestType.Patch:\n            case ApiRequestType.Delete:\n                return this.buildChangeQuery(request);\n            case ApiRequestType.Create:\n                return this.buildCreateQuery(request);\n            default:\n                throw new ApiEdgeError(400, \"Unsupported Query Type\")\n        }\n    }\n}\n"]}