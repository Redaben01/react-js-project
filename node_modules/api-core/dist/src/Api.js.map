{"version":3,"file":"Api.js","sourceRoot":"","sources":["../../src/Api.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition} from \"./edge/ApiEdgeDefinition\";\nimport {ApiEdgeMetadata} from \"./edge/ApiEdgeMetadata\";\nimport {ApiRequestParser} from \"./request/ApiRequestParser\";\nimport {ApiQueryBuilder} from \"./query/ApiQueryBuilder\";\nimport {ApiRequest, ApiRequestType} from \"./request/ApiRequest\";\nimport {ApiQuery, ApiQueryScope} from \"./query/ApiQuery\";\nimport {ApiEdgeRelation, ExportedApiEdgeRelation} from \"./relations/ApiEdgeRelation\";\nimport {ApiAction, ApiActionTriggerKind} from \"./query/ApiAction\";\nimport {ExternalApiEdge} from \"./edge/ExternalApiEdge\";\nimport {ApiResolver} from \"./resolver/ApiResolver\";\nimport {LocalApiResolver} from \"./resolver/LocalApiResolver\";\nconst pkg = require('../../package.json');\n\nexport interface ApiInfo {\n    title: string\n    description?: string\n    termsOfService?: string\n    contact?: {\n        name?: string\n        url?: string\n        email?: string\n    }\n    license?: {\n        name: string,\n        url?: string\n    }\n}\n\nexport interface ApiMetadata {\n    info: ApiInfo\n    version: string\n    edges: ApiEdgeMetadata[]\n    relations: ExportedApiEdgeRelation[]\n    services: ApiService[]\n}\n\nexport interface ApiService {\n    name: string\n    version: string\n}\n\nexport class Api {\n    static defaultIdPostfix: string = \"Id\";\n    static defaultIdField: string = \"id\";\n\n    url?: string;\n    info?: ApiInfo;\n    service: ApiService;\n\n    edges: ApiEdgeDefinition[] = [];\n    relations: ApiEdgeRelation[] = [];\n    actions: ApiAction[] = [];\n    private parser: ApiRequestParser;\n    private queryBuilder: ApiQueryBuilder;\n    resolver: ApiResolver;\n\n    constructor(service: ApiService, ...edges: ApiEdgeDefinition[]) {\n        this.service = service;\n        this.edges = edges;\n        this.parser = new ApiRequestParser(this);\n        this.queryBuilder = new ApiQueryBuilder(this);\n        this.resolver = new LocalApiResolver(this)\n    }\n\n    findEdge = (name: string, plural = true) => {\n        return this.resolver.resolveEdge(name, plural)\n    };\n\n    findRelation(name: string) {\n        return this.resolver.resolveRelation(name)\n    }\n\n    findRelationOfEdge(edge: string|ApiEdgeDefinition, name: string) {\n        const edgeName = (edge as any).name || edge;\n        return this.resolver.resolveRelationOfEdge(edgeName, name)\n    }\n\n    findRelationTo(edge: string|ApiEdgeDefinition, name: string) {\n        const edgeName = (edge as any).name || edge;\n        return this.resolver.resolveRelationTo(edgeName, name)\n    }\n\n    findRelationFrom(edge: string|ApiEdgeDefinition, name: string) {\n        const edgeName = (edge as any).name || edge;\n        return this.resolver.resolveRelationFrom(edgeName, name)\n    }\n\n    parseRequest = async (requestParts: string[], type: ApiRequestType|null = null) => {\n        const result = await this.parser.parse(requestParts);\n        if(type) result.type = type;\n        return result\n    };\n\n    buildQuery = (request: ApiRequest): ApiQuery => {\n        const query = this.queryBuilder.build(request);\n        query.request = request;\n        return query\n    };\n\n    edge(edge: ApiEdgeDefinition) {\n        this.edges.push(edge);\n        edge.api = this;\n        return this\n    };\n\n    relation(relation: ApiEdgeRelation) {\n        relation.from.relations.push(relation);\n        relation.to.relations.push(relation);\n        this.relations.push(relation);\n        return this\n    }\n\n    use = (action: ApiAction) => {\n        this.actions.unshift(action);\n        return this\n    };\n\n    action = (name: string,\n              execute: (scope: ApiQueryScope) => Promise<ApiQueryScope>,\n              triggerKind: ApiActionTriggerKind = ApiActionTriggerKind.OnInput): Api => {\n        this.actions.unshift(new ApiAction(name, execute, triggerKind));\n        return this\n    };\n\n    metadata = (): ApiMetadata => {\n        return {\n            info: this.info || { title: 'API' },\n            version: pkg.version,\n            services: [ this.service ],\n            edges: this.edges\n                .filter(edge => !edge.external)\n                .map(edge => edge.metadata()),\n            relations: this.relations\n                .map(relation => relation.toJSON())\n        }\n    };\n\n    static async fromMetadata(metadata: ApiMetadata): Promise<Api> {\n        const api = new Api(metadata.services[0] || {});\n        api.info = metadata.info;\n\n        for(let edge of metadata.edges) {\n            //if(edge.external) continue; -- TODO\n            api.edge(new ExternalApiEdge(edge, api))\n        }\n\n        for(let relation of metadata.relations) {\n            api.relation(await ApiEdgeRelation.fromJSON(relation, api))\n        }\n\n        return api\n    }\n\n    async prepare() {\n        for(let edge of this.edges) {\n            await edge.prepare(this)\n        }\n    }\n\n    private extension: { [key: string]: any } = {};\n    get = (key: string) => this.extension[key];\n    set = (key: string, value: any) => this.extension[key] = value;\n}\n"]}