{"version":3,"file":"ApiEdgeQueryContext.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeQueryContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeQueryFilter, ApiEdgeQueryFilterType, ExportedApiEdgeQueryFilter} from \"./ApiEdgeQueryFilter\";\nimport {OneToOneRelation} from \"../relations/OneToOneRelation\";\nimport {Api} from \"../Api\";\nimport {ApiEdgeQueryParameter, ExportedApiEdgeQueryParameter} from \"./ApiEdgeQueryParameter\";\n\nexport interface ExportedApiEdgeQueryContext {\n    id: string|null\n    fields: string[]\n    populatedRelations: string[]\n    pagination: {\n        skip: number,\n        limit: number\n    }\n    sortBy: [string, number][]\n    filters: ExportedApiEdgeQueryFilter[]\n    parameters: ExportedApiEdgeQueryParameter[]\n}\n\nexport class ApiEdgeQueryContext {\n    id: string|null;\n    fields: string[] = [];\n    populatedRelations: OneToOneRelation[] = [];\n    pagination: {\n        skip: number,\n        limit: number\n    };\n    sortBy: [string, number][] = [];\n    filters: ApiEdgeQueryFilter[] = [];\n    parameters: ApiEdgeQueryParameter[] = [];\n    identity: any;\n    method: string;\n\n    clone = () => {\n        let temp = new ApiEdgeQueryContext();\n        temp.id = this.id;\n        temp.identity = this.identity;\n\n        this.fields.forEach(f => temp.fields.push(f));\n        this.populatedRelations.forEach(f => temp.populatedRelations.push(f));\n        this.filters.forEach(f => temp.filters.push(f.clone()));\n        this.parameters.forEach(f => temp.parameters.push(f.clone()));\n        this.sortBy.forEach(f => temp.sortBy.push([f[0], f[1]]));\n\n        if(this.pagination) {\n            temp.pagination = {\n                skip: this.pagination.skip,\n                limit: this.pagination.limit\n            }\n        }\n\n        return temp;\n    };\n\n    toJSON = (): ExportedApiEdgeQueryContext => {\n        return {\n            id: this.id,\n            fields: this.fields,\n            populatedRelations: this.populatedRelations.map(relation => relation.name),\n            pagination: this.pagination,\n            sortBy: this.sortBy,\n            filters: this.filters,\n            parameters: this.parameters\n        }\n    };\n\n    static fromJSON = async (obj: ExportedApiEdgeQueryContext, api: Api) => {\n        const context = new ApiEdgeQueryContext();\n        context.id = obj.id;\n        context.fields = obj.fields;\n        context.populatedRelations = [];\n        for(let name of obj.populatedRelations) {\n            context.populatedRelations.push(await api.findRelation(name) as OneToOneRelation)\n        }\n        context.pagination = obj.pagination;\n        context.sortBy = obj.sortBy;\n        context.filters = obj.filters.map(\n            ({ field, type, value }) => new ApiEdgeQueryFilter(field, type, value)\n        );\n        context.parameters = obj.parameters.map(\n            ({ key, value }) => new ApiEdgeQueryParameter(key, value)\n        );\n        return context\n    };\n\n    constructor(id: string|null = null, fields: string[] = []) {\n        this.id = id;\n        this.fields = fields;\n    }\n\n    paginate = (skip: number, limit: number) => {\n        this.pagination = {\n            skip, limit\n        };\n        return this\n    };\n\n    sort = (fieldName: string, ascending: boolean = true) => {\n        this.sortBy.push([fieldName, (ascending ? 1 : -1)]);\n        return this\n    };\n\n    populate(relation: OneToOneRelation) {\n        this.populatedRelations.push(relation);\n        return this\n    }\n\n    field(field: string) {\n        this.fields.push(field);\n        return this\n    }\n\n    filter(field: string, type: ApiEdgeQueryFilterType, value: any) {\n        this.filters.push(new ApiEdgeQueryFilter(field, type, value));\n        return this\n    }\n\n    parameter(key: string): any;\n    parameter(key: string, value: any): ApiEdgeQueryContext;\n    parameter(key: string, value?: any): ApiEdgeQueryContext|any {\n        if(typeof value === \"undefined\") {\n            const param = this.parameters.find(p => p.key === key);\n            return param ? param.value : null\n        }\n        else {\n            this.parameters.push(new ApiEdgeQueryParameter(key, value));\n            return this\n        }\n    }\n}"]}