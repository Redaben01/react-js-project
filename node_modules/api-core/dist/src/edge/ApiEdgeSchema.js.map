{"version":3,"file":"ApiEdgeSchema.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeSchema.ts"],"names":[],"mappings":"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","sourcesContent":["const parse = require('obj-parse'),\n    deepKeys = require('deep-keys'),\n    SimpleSchema = require('simpl-schema').default;\n\nexport class Mixed {\n    //for schemas\n}\n\nexport const SchemaReference = SimpleSchema.oneOf(String, Mixed);\nexport const JSONDate = SimpleSchema.oneOf(String, Number, Date);\n\n\nexport class SubSchema extends SimpleSchema {\n    private readonly _apiCoreOriginal: any;\n\n    constructor(schema: any, options?: any, ...args: any[]) {\n        if(!options) options = { requiredByDefault: false };\n        super(schema, options, ...args);\n        this._apiCoreOriginal = schema;\n    }\n\n    get original() {\n        return this._apiCoreOriginal\n    }\n}\n\nexport class ApiEdgeSchemaTransformation {\n    applyToInput: (schema: any, model: any) => void;\n    applyToOutput: (mode: any, schema: any) => void;\n    affectedSchemaField: string;\n    affectedModelFields: string[];\n    parsedField: any;\n    schemaType: any;\n\n    constructor(input: (schema: any, model: any) => void,\n                output: (model: any, schema: any) => void,\n                modelFields: string[],\n                schemaType: any,\n                schemaField: string = \"\") {\n        this.applyToInput = input;\n        this.applyToOutput = output;\n        this.affectedSchemaField = schemaField;\n        this.affectedModelFields = modelFields;\n        this.parsedField = parse(schemaField);\n        this.schemaType = schemaType\n    }\n\n    setSchemaField(field: string) {\n        this.affectedSchemaField = field;\n        this.parsedField = parse(field);\n    }\n}\n\nexport class ApiEdgeSchema {\n    fields: string[] = [];\n    schema: any|null = null;\n    originalSchema: any|null = null;\n    transformations: ApiEdgeSchemaTransformation[];\n\n    private fieldMatrix: { [key: string]: string[] } = {};\n    private renameMatrix: { [key: string]: string } = {};\n    transformField = (field: string) => {\n        return this.renameMatrix[field] || field\n    };\n\n    transformFields = (fields: string[]): string[] => {\n        let output: string[] = [];\n        for (const field of fields) {\n            const transformedFields = this.fieldMatrix[field];\n            if(transformedFields) {\n                transformedFields.forEach((f: string) => output.push(f))\n            }\n            else {\n                if (this.renameMatrix[field])\n                    output.push(this.renameMatrix[field]);\n                else\n                    output.push(field);\n            }\n        }\n        return output\n    };\n\n    cleanAndValidateModel = (model: any, modifier: boolean = false): { valid: boolean, errors?: any[] } => {\n        if(this.schema) {\n            const context = this.schema.newContext();\n\n            context.clean(model, {\n                mutate: true,       //Update the original object\n                filter: true,       //Remove not allowed fields\n                autoConvert: true,  //Converts values when possible\n                removeEmptyStrings: false,\n                trimStrings: false,\n                getAutoValues: !modifier //Fill defaults\n            });\n\n            model = modifier\n                ? { $set: model }\n                : model;\n\n            context.validate(model, { modifier });\n\n            return {\n                valid: context.isValid(),\n                errors: context.validationErrors().map(\n                    ({ name }: any) => context.keyErrorMessage(name)\n                )\n            }\n        }\n\n        return { valid: true }\n    };\n\n    private createInputTransformer(schemaField: any, transform: string): (schema: any, model: any) => void {\n        if(transform === \"=\") {\n            return (schema: any, model: any) => schemaField.assign(model, schemaField(schema));\n        }\n        else if(transform[0] === \"=\") {\n            const fieldName = transform.substring(1),\n                modelField = parse(fieldName);\n\n            return (schema: any, model: any) => modelField.assign(model, schemaField(schema));\n        }\n        else throw \"Not Supported Transform\";\n    }\n\n    private static createOutputTransformer(schemaField: any, transform: string): (model: any, schema: any) => void {\n        if(transform === \"=\") {\n            return (model: any, schema: any) => schemaField.assign(schema, schemaField(model));\n        }\n        else if(transform[0] === \"=\") {\n            const fieldName = transform.substring(1),\n                modelField = parse(fieldName);\n\n            return (model: any, schema: any) => schemaField.assign(schema, modelField(model));\n        }\n        else {\n            throw \"Not Supported Transform\";\n        }\n    }\n\n    private createTransformation(schemaField: string, schema: any, typedSchema: any): ApiEdgeSchemaTransformation|undefined {\n        const parsedSchemaField = parse(schemaField),\n            transform: string|ApiEdgeSchemaTransformation = parsedSchemaField(schema);\n\n        if(transform instanceof ApiEdgeSchemaTransformation) {\n            transform.setSchemaField(schemaField);\n\n            let transformedFields = this.fieldMatrix[transform.affectedSchemaField];\n            if(transformedFields) {\n                transform.affectedModelFields.forEach((field: string) => transformedFields.push(field))\n            }\n            else {\n                this.fieldMatrix[transform.affectedSchemaField]\n                    = transform.affectedModelFields.map((field: string) => field)\n            }\n\n            this.fixFields(schemaField);\n\n            return transform;\n        }\n        else if(typeof transform === \"string\") {\n            this.renameMatrix[schemaField] = transform.substring(1);\n\n            return new ApiEdgeSchemaTransformation(\n                this.createInputTransformer(parsedSchemaField, transform),\n                ApiEdgeSchema.createOutputTransformer(parsedSchemaField, transform),\n                [ schemaField ],\n                typedSchema ? typedSchema[schemaField] : Mixed,\n                schemaField\n            )\n        }\n    }\n\n    private fixFields(fieldName: string) {\n        this.fields = this.fields.filter((field: string) => field.indexOf(fieldName+\".\") == -1)\n    }\n\n    constructor(schema: any, typedSchema: any = null, fields?: string[]) {\n        this.fields = fields || deepKeys(schema, true);\n        this.originalSchema = typedSchema;\n        this.schema = typedSchema\n            ? new SimpleSchema(typedSchema, { requiredByDefault: false })\n            : null;\n\n        this.transformations = [];\n        for(let i = 0; i < this.fields.length; ++i) {\n            const transform = this.createTransformation(this.fields[i], schema, typedSchema);\n            if(transform)\n                this.transformations.push(transform)\n        }\n    }\n}\n"]}