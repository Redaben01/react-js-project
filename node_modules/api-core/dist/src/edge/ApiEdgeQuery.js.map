{"version":3,"file":"ApiEdgeQuery.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition} from './ApiEdgeDefinition';\nimport {ApiEdgeQueryType} from './ApiEdgeQueryType';\nimport {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiEdgeError} from \"../query/ApiEdgeError\";\nimport {ApiEdgeSchemaTransformation} from \"./ApiEdgeSchema\";\n\nexport class ApiEdgeQuery {\n\n    /**\n     * The API edge to execute the query on.\n     */\n    edge: ApiEdgeDefinition;\n\n    /**\n     * The type of query to execute.\n     */\n    type: ApiEdgeQueryType;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    context: ApiEdgeQueryContext;\n\n    /**\n     * The list of parameters to use during execution.\n     */\n    body: any;\n\n    private originalFields: string[] = [];\n\n    /**\n     * Create a new API Edge Query for the specified API Edge with the specified parameters.\n     * @param {ApiEdgeDefinition} edge\n     * @param {ApiEdgeQueryType} type\n     * @param {ApiEdgeQueryContext} context\n     * @param {object} body\n     */\n    constructor(edge: ApiEdgeDefinition,\n                type: ApiEdgeQueryType = ApiEdgeQueryType.Get,\n                context: ApiEdgeQueryContext = new ApiEdgeQueryContext(),\n                body: any = null) {\n        this.edge = edge;\n        this.type = type;\n        this.context = context;\n        this.body = body;\n\n        switch (this.type) {\n            case ApiEdgeQueryType.Get:\n                if(!this.edge.allowGet) {\n                    throw new ApiEdgeError(405, `Get queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.Exists:\n                if(!this.edge.allowExists) {\n                    throw new ApiEdgeError(405, `Exists queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.Create:\n                if(!this.edge.allowCreate) {\n                    throw new ApiEdgeError(405, `Create queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.Delete:\n                if(!this.edge.allowRemove) {\n                    throw new ApiEdgeError(405, `Delete queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.Update:\n                if(!this.edge.allowUpdate) {\n                    throw new ApiEdgeError(405, `Update queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.Patch:\n                if(!this.edge.allowPatch) {\n                    throw new ApiEdgeError(405, `Patch queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            case ApiEdgeQueryType.List:\n                if(!this.edge.allowList) {\n                    throw new ApiEdgeError(405, `List queries not allowed on edge: ${this.edge.name}`)\n                }\n                break;\n            default:\n                throw new ApiEdgeError(405, \"Unsupported Query Type\")\n        }\n    }\n\n    private applySchemaOnInputItem = (item: any) => {\n        let output = {};\n        this.edge.schema.transformations.forEach((transformation: ApiEdgeSchemaTransformation) => {\n            if(transformation.parsedField(item) !== undefined)\n                transformation.applyToInput(item, output)\n        });\n\n        return output\n    };\n\n    private applySchemaOnItem = (item: any): any => {\n        let output = {};\n\n        if(this.originalFields.length) {\n            this.edge.schema.transformations.forEach((transformation: ApiEdgeSchemaTransformation) => {\n                if(this.originalFields.indexOf(transformation.affectedSchemaField) != -1)\n                    transformation.applyToOutput(item, output)\n            });\n        }\n        else {\n            this.edge.schema.transformations.forEach((transformation: ApiEdgeSchemaTransformation) => {\n                transformation.applyToOutput(item, output)\n            });\n        }\n\n        return output\n    };\n\n/*    private applyInputListSchema = (value: ApiEdgeQueryResponse) => {\n        if(!this.edge.schema)\n            return value;\n\n        value.data = (value.data as any[]).map((item: any) => this.applySchemaOnInputItem(item));\n        return value\n    };*/\n\n    private applyListSchema = (value: ApiEdgeQueryResponse) => {\n        if(!this.edge.schema)\n            return value;\n\n        value.data = (value.data as any[]).map((item: any) => this.applySchemaOnItem(item));\n        return value\n    };\n\n    private applyInputSchema = (value: any): any|Promise<any> => {\n        if(!this.edge.schema)\n            return value;\n\n        return this.applySchemaOnInputItem(value)\n    };\n\n    private applySchema = (value: ApiEdgeQueryResponse): ApiEdgeQueryResponse|Promise<ApiEdgeQueryResponse> => {\n        if(!this.edge.schema)\n            return value;\n\n        value.data = this.applySchemaOnItem(value.data);\n        return value\n    };\n\n    execute = (): Promise<ApiEdgeQueryResponse> => {\n        if(this.context.fields.length) {\n            this.originalFields = this.context.fields;\n            this.context.fields = this.edge.schema.transformFields(this.context.fields);\n            this.context.filters.forEach(filter => filter.field = this.edge.schema.transformField(filter.field))\n            //TODO: Support sort-by on renamed fields\n        }\n\n        if(this.body\n            && this.type !== ApiEdgeQueryType.Get\n            && this.type !== ApiEdgeQueryType.Exists\n            && this.type !== ApiEdgeQueryType.Delete\n            && this.type !== ApiEdgeQueryType.List)\n        {\n            if(!this.context.id) this.context.id = this.body.id;\n\n            if(this.edge.schema) {\n                const result = this.edge.schema.cleanAndValidateModel(\n                    this.body,\n                    this.type === ApiEdgeQueryType.Patch\n                );\n\n                if(!result.valid) {\n                    const errors = result.errors\n                        ? result.errors.join(', ')\n                        : '';\n                    throw new ApiEdgeError(422, \"Schema Validation Failed: \" + errors)\n                }\n            }\n\n            this.body = this.applyInputSchema(this.body);\n        }\n\n        switch (this.type) {\n            case ApiEdgeQueryType.Get:\n                return this.edge.getEntry(this.context).then(this.applySchema);\n            case ApiEdgeQueryType.Exists:\n                return this.edge.exists(this.context);\n            case ApiEdgeQueryType.Create:\n                return this.edge.createEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Delete:\n                return this.edge.removeEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Update:\n                return this.edge.updateEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.Patch:\n                return this.edge.patchEntry(this.context, this.body).then(this.applySchema);\n            case ApiEdgeQueryType.List:\n                return this.edge.listEntries(this.context).then(this.applyListSchema);\n            default:\n                throw new ApiEdgeError(500, \"Unsupported Query Type\")\n        }\n    }\n}"]}