"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaTypeMapper = void 0;
const ApiEdgeSchema_1 = require("../ApiEdgeSchema");
class SchemaTypeMapper {
    static mapField(field, typeMapper) {
        if (Array.isArray(field)) {
            return [
                SchemaTypeMapper.mapField(field[0], typeMapper)
            ];
        }
        else if (field && typeof field == "object" && field.type) {
            return Object.assign(Object.assign({}, field), { type: typeMapper(field.type) });
        }
        else if (field instanceof ApiEdgeSchema_1.SubSchema) {
            return typeMapper(field.original);
        }
        else {
            return typeMapper(field);
        }
    }
    static mapSchemaFieldType(type) {
        switch (type) {
            case Number:
                return 'number';
            case String:
                return 'string';
            case Boolean:
                return 'boolean';
            case ApiEdgeSchema_1.SchemaReference:
                return 'reference';
            case ApiEdgeSchema_1.JSONDate:
                return 'date';
            case ApiEdgeSchema_1.Mixed:
                return 'any';
            case Object:
                return 'object';
            default:
                if (Array.isArray(type)) {
                    return [
                        SchemaTypeMapper.mapSchemaFieldType(type[0])
                    ];
                }
                else if (type && typeof type == "object") {
                    return SchemaTypeMapper.exportSchema(type);
                }
        }
    }
    static mapFieldTypeSchema(type) {
        switch (type) {
            case 'number':
                return Number;
            case 'string':
                return String;
            case 'boolean':
                return Boolean;
            case 'reference':
                return ApiEdgeSchema_1.SchemaReference;
            case 'date':
                return ApiEdgeSchema_1.JSONDate;
            case 'any':
                return ApiEdgeSchema_1.Mixed;
            case 'object':
                return Object;
            default:
                if (Array.isArray(type)) {
                    return [
                        SchemaTypeMapper.mapFieldTypeSchema(type[0])
                    ];
                }
                else if (type && typeof type == "object") {
                    return new ApiEdgeSchema_1.SubSchema(SchemaTypeMapper.importSchema(type));
                }
        }
    }
    static exportSchema(field) {
        const output = {};
        Object
            .keys(field)
            .forEach(key => output[key] = SchemaTypeMapper.mapField(field[key], SchemaTypeMapper.mapSchemaFieldType));
        return output;
    }
    static importSchema(field) {
        const output = {};
        Object
            .keys(field)
            .forEach(key => output[key] = SchemaTypeMapper.mapField(field[key], SchemaTypeMapper.mapFieldTypeSchema));
        return output;
    }
}
exports.SchemaTypeMapper = SchemaTypeMapper;
//# sourceMappingURL=SchemaTypeMapper.js.map