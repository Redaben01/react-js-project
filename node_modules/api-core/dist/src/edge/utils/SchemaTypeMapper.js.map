{"version":3,"file":"SchemaTypeMapper.js","sourceRoot":"","sources":["../../../../src/edge/utils/SchemaTypeMapper.ts"],"names":[],"mappings":"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","sourcesContent":["import {Mixed, SchemaReference, SubSchema, JSONDate} from \"../ApiEdgeSchema\";\n\nexport class SchemaTypeMapper {\n    private static mapField(field: any, typeMapper: (type: any) => any): any {\n        if(Array.isArray(field)) {\n            return [\n                SchemaTypeMapper.mapField(field[0], typeMapper)\n            ]\n        }\n        else if(field && typeof field == \"object\" && field.type) {\n            return {\n                ...field,\n                type: typeMapper(field.type)\n            }\n        }\n        else if(field instanceof SubSchema) {\n            return typeMapper(field.original)\n        }\n        else {\n            return typeMapper(field)\n        }\n    }\n\n    private static mapSchemaFieldType(type: any): any {\n        switch(type) {\n            case Number:\n                return 'number';\n            case String:\n                return 'string';\n            case Boolean:\n                return 'boolean';\n            case SchemaReference:\n                return 'reference';\n            case JSONDate:\n                return 'date';\n            case Mixed:\n                return 'any';\n            case Object:\n                return 'object';\n            default:\n                if(Array.isArray(type)) {\n                    return [\n                        SchemaTypeMapper.mapSchemaFieldType(type[0])\n                    ]\n                }\n                else if(type && typeof type == \"object\") {\n                    return SchemaTypeMapper.exportSchema(type)\n                }\n        }\n    }\n\n    private static mapFieldTypeSchema(type: any): any {\n        switch(type) {\n            case 'number':\n                return Number;\n            case 'string':\n                return String;\n            case 'boolean':\n                return Boolean;\n            case 'reference':\n                return SchemaReference;\n            case 'date':\n                return JSONDate;\n            case 'any':\n                return Mixed;\n            case 'object':\n                return Object;\n            default:\n                if(Array.isArray(type)) {\n                    return [\n                        SchemaTypeMapper.mapFieldTypeSchema(type[0])\n                    ]\n                }\n                else if(type && typeof type == \"object\") {\n                    return new SubSchema(SchemaTypeMapper.importSchema(type))\n                }\n        }\n    }\n\n    static exportSchema(field: any): any {\n        const output: { [key: string]: any } = {};\n        Object\n            .keys(field)\n            .forEach(key =>\n                output[key] = SchemaTypeMapper.mapField(field[key], SchemaTypeMapper.mapSchemaFieldType));\n\n        return output\n    }\n\n    static importSchema(field: any): any {\n        const output: { [key: string]: any } = {};\n        Object\n            .keys(field)\n            .forEach(key =>\n                output[key] = SchemaTypeMapper.mapField(field[key], SchemaTypeMapper.mapFieldTypeSchema));\n\n        return output\n    }\n}"]}