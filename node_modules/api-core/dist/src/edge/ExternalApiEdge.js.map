{"version":3,"file":"ExternalApiEdge.js","sourceRoot":"","sources":["../../../src/edge/ExternalApiEdge.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,iEAA4D;AAC5D,mDAA8C;AAC9C,2DAA+D;AAC/D,+DAA0D;AAC1D,mDAA8C;AAI9C,MAAsB,mBAAmB;IAIrC,YAAsB,QAAa,EAAE,GAAQ;QACzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;IAaK,IAAI;;YACN,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;QAC7D,CAAC;KAAA;CACJ;AAxBD,kDAwBC;AAED,MAAa,eAAgB,SAAQ,2BAAO;IACxC,YAAY,QAAa,EAAE,GAAQ,EAAE,QAA8B;QAC/D,KAAK,EAAE,CAAC;QA0CZ,aAAQ,GAAG,CAAC,OAA4B,EAAiC,EAAE;YACvE,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QAC1C,CAAC,CAAC;QAEF,gBAAW,GAAG,CAAO,OAA4B,EAAiC,EAAE;YAChF,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAC7C,CAAC,CAAA,CAAC;QAEF,gBAAW,GAAG,CAAO,OAA4B,EAAE,IAAS,EAAiC,EAAE;YAC3F,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QACnD,CAAC,CAAA,CAAC;QAEF,gBAAW,GAAG,CAAO,OAA4B,EAAE,IAAS,EAAiC,EAAE;YAC3F,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QACnD,CAAC,CAAA,CAAC;QAEF,eAAU,GAAG,CAAO,OAA4B,EAAE,IAAS,EAAiC,EAAE;YAC1F,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QAClD,CAAC,CAAA,CAAC;QAEF,gBAAW,GAAG,CAAO,OAA4B,EAAE,IAAS,EAAiC,EAAE;YAC3F,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QACnD,CAAC,CAAA,CAAC;QAEF,WAAM,GAAG,CAAO,OAA4B,EAAiC,EAAE;YAC3E,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QACxC,CAAC,CAAA,CAAC;QAlEE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAEhC,MAAM,YAAY,GAA8B,EAAE,CAAC;QACnD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;QACtE,IAAI,CAAC,MAAM,GAAG,IAAI,6BAAa,CAC3B,YAAY,EACZ,QAAQ,CAAC,OAAO;YACZ,CAAC,CAAC,mCAAgB,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;YACjD,CAAC,CAAC,IAAI,CACb,CAAC;QAEF,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,GAAS,EAAE,gDAAC,OAAA,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAA,GAAA,CAAC;QAC/F,KAAI,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,QAAQ,CAAC,OAAO,EAAE;YAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CACb,IAAI,6BAAa,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CACtE,CAAA;SACJ;QAED,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;QACxB,IAAG,QAAQ;YACP,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAC;CAiCJ;AAvED,0CAuEC","sourcesContent":["import {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiEdgeSchema} from \"./ApiEdgeSchema\";\nimport {ApiEdge, ApiEdgeDefinition} from \"./ApiEdgeDefinition\";\nimport {SchemaTypeMapper} from \"./utils/SchemaTypeMapper\";\nimport {ApiEdgeMethod} from \"./ApiEdgeMethod\";\nimport {ApiQueryScope} from \"../query/ApiQuery\";\nimport {Api} from \"../Api\";\n\nexport abstract class ExternalApiProvider {\n    protected metadata: any;\n    protected api: Api;\n\n    protected constructor(metadata: any, api: Api) {\n        this.metadata = metadata;\n        this.api = api;\n    }\n\n    abstract getEntry: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    abstract listEntries: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    abstract createEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    abstract updateEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    abstract patchEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    abstract removeEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    abstract exists: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    abstract callMethod: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>;\n\n    protected abstract prepare(): Promise<void>;\n\n    async edge(): Promise<ApiEdgeDefinition> {\n        await this.prepare();\n        return new ExternalApiEdge(this.metadata, this.api, this)\n    }\n}\n\nexport class ExternalApiEdge extends ApiEdge {\n    constructor(metadata: any, api: Api, provider?: ExternalApiProvider) {\n        super();\n\n        this.api = api;\n\n        this.name = metadata.name;\n        this.pluralName = metadata.pluralName;\n        this.idField = metadata.idField;\n\n        const publicSchema: { [key: string]: string } = {};\n        metadata.fields.forEach((field: string) => publicSchema[field] = '=');\n        this.schema = new ApiEdgeSchema(\n            publicSchema,\n            metadata.typings\n                ? SchemaTypeMapper.importSchema(metadata.typings)\n                : null\n        );\n\n        const callMethod = provider ? provider.callMethod : async () => new ApiEdgeQueryResponse(null);\n        for(let { name, scope, type, parameters } of metadata.methods) {\n            this.methods.push(\n                new ApiEdgeMethod(name, callMethod, scope, type, parameters, false)\n            )\n        }\n\n        this.allowGet = metadata.allowGet;\n        this.allowList = metadata.allowList;\n        this.allowCreate = metadata.allowCreate;\n        this.allowUpdate = metadata.allowUpdate;\n        this.allowPatch = metadata.allowPatch;\n        this.allowRemove = metadata.allowRemove;\n        this.allowExists = false; //metadata.allowExists;\n        this.external = true;\n\n        this.url = metadata.url;\n        if(provider) \n            this.provider = provider;\n    }\n\n    url: string;\n    provider: ExternalApiProvider;\n    api: Api;\n\n    getEntry = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.getEntry(context)\n    };\n\n    listEntries = async (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.listEntries(context)\n    };\n\n    createEntry = async (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.createEntry(context, body)\n    };\n\n    updateEntry = async (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.updateEntry(context, body)\n    };\n\n    patchEntry = async (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.patchEntry(context, body)\n    };\n\n    removeEntry = async (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.removeEntry(context, body)\n    };\n\n    exists = async (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return this.provider.exists(context)\n    };\n}\n"]}