{"version":3,"file":"ApiEdgeDefinition.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeDefinition.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeRelation} from \"../relations/ApiEdgeRelation\";\nimport {ApiEdgeQueryContext} from \"./ApiEdgeQueryContext\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiQueryScope} from \"../query/ApiQuery\";\nimport {ApiEdgeMethod, ApiEdgeMethodOptions, ApiEdgeMethodScope} from \"./ApiEdgeMethod\";\nimport {ApiRequestType} from \"../request/ApiRequest\";\nimport {ApiEdgeAction, ApiEdgeActionTrigger, ApiEdgeActionTriggerKind} from \"./ApiEdgeAction\";\nimport {ApiEdgeQueryType} from \"./ApiEdgeQueryType\";\nimport {ApiEdgeSchema} from \"./ApiEdgeSchema\";\nimport {SchemaTypeMapper} from \"./utils/SchemaTypeMapper\";\nimport {Api} from \"../Api\";\nimport {ApiEdgeQuery} from \"./ApiEdgeQuery\";\nimport {ApiEdgeMetadata} from \"./ApiEdgeMetadata\";\n\nexport interface ApiEdgeDefinition {\n    name: string;\n    pluralName: string;\n    idField: string;\n\n    api: Api;\n\n    schema: ApiEdgeSchema;\n    methods: ApiEdgeMethod[];\n    relations: ApiEdgeRelation[];\n    actions: ApiEdgeAction[];\n\n    allowGet: boolean;\n    allowList: boolean;\n    allowCreate: boolean;\n    allowUpdate: boolean;\n    allowPatch: boolean;\n    allowRemove: boolean;\n    allowExists: boolean;\n    external: boolean;\n\n    getEntry: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    listEntries: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    createEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    updateEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    patchEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    removeEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    exists: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n\n    prepare: (api: Api) => Promise<void>;\n    resolve: () => Promise<boolean>;\n    metadata: () => ApiEdgeMetadata\n    relation: (name: string) => Promise<ApiEdgeRelation|undefined>;\n\n    get(key: string): any;\n    set(key: string, value: any): any;\n}\n\nexport abstract class ApiEdge implements ApiEdgeDefinition {\n    name: string;\n    pluralName: string;\n    idField: string;\n\n    api: Api;\n\n    schema: ApiEdgeSchema;\n    methods: ApiEdgeMethod[] = [];\n    relations: ApiEdgeRelation[] = [];\n    actions: ApiEdgeAction[] = [];\n\n    allowGet: boolean = true;\n    allowList: boolean = true;\n    allowCreate: boolean = true;\n    allowUpdate: boolean = true;\n    allowPatch: boolean = true;\n    allowRemove: boolean = true;\n    allowExists: boolean = true;\n    external: boolean = false;\n\n    getEntry: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    listEntries: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    createEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    updateEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    patchEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    removeEntry: (context: ApiEdgeQueryContext, entryFields: any) => Promise<ApiEdgeQueryResponse>;\n    exists: (context: ApiEdgeQueryContext) => Promise<ApiEdgeQueryResponse>;\n    prepare: (api: Api) => Promise<void>;\n\n    resolve = () => Promise.resolve(true);\n\n    metadata = () => {\n        return {\n            name: this.name,\n            pluralName: this.pluralName,\n            idField: this.idField,\n            fields: this.schema.fields,\n            methods: this.methods.map(m => ({\n                name: m.name,\n                type: m.acceptedTypes,\n                scope: m.scope,\n                parameters: m.parameters\n            })),\n            //relatedFields,\n            typings: this.schema.originalSchema\n                ? SchemaTypeMapper.exportSchema(this.schema.originalSchema)\n                : undefined,\n            allowGet: this.allowGet,\n            allowList: this.allowList,\n            allowCreate: this.allowCreate,\n            allowUpdate: this.allowUpdate,\n            allowPatch: this.allowPatch,\n            allowRemove: this.allowRemove,\n            allowExists: this.allowExists,\n            external: this.external\n        }\n    };\n\n    use = (action: ApiEdgeAction) => {\n        this.actions.unshift(action);\n        return this\n    };\n\n    action = (name: string,\n              execute: (scope: ApiQueryScope) => Promise<ApiQueryScope>,\n              targetTypes: ApiEdgeQueryType = ApiEdgeQueryType.Any,\n              triggerKind: ApiEdgeActionTriggerKind = ApiEdgeActionTriggerKind.BeforeEvent,\n              triggers: ApiEdgeActionTrigger = ApiEdgeActionTrigger.Any,\n              triggerNames: string[] = []): ApiEdge => {\n        this.actions.unshift(new ApiEdgeAction(name, execute, targetTypes, triggerKind, triggers, triggerNames));\n        return this\n    };\n\n    relation = (name: string) => this.api.findRelationOfEdge(this.name, name);\n\n    edgeMethod(name: string,\n               execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n               acceptedTypes?: ApiRequestType,\n               requiresData?: boolean): ApiEdge;\n    edgeMethod(name: string,\n               execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n               acceptedTypes?: ApiRequestType,\n               parameters?: string[],\n               requiresData?: boolean): ApiEdge;\n    edgeMethod(name: string,\n               execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n               acceptedTypes: ApiRequestType = ApiRequestType.Any,\n               parametersOrData: string[]|boolean = [],\n               requiresData = true): ApiEdge {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name))\n           throw \"A method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Edge, acceptedTypes, parametersOrData, requiresData));\n        return this\n    };\n\n    collectionMethod(name: string,\n                     execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                     acceptedTypes?: ApiRequestType,\n                     requiresData?: boolean): ApiEdge;\n    collectionMethod(name: string,\n                     execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                     acceptedTypes?: ApiRequestType,\n                     parameters?: string[],\n                     requiresData?: boolean): ApiEdge;\n    collectionMethod(name: string,\n                     execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                     acceptedTypes: ApiRequestType = ApiRequestType.Any,\n                     parametersOrData: string[]|boolean = [],\n                     requiresData = true): ApiEdge {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name &&\n            (method.scope == ApiEdgeMethodScope.Collection || method.scope == ApiEdgeMethodScope.Edge)))\n            throw \"A collection method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Collection, acceptedTypes, parametersOrData, requiresData));\n        return this\n    };\n\n    entryMethod(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                acceptedTypes?: ApiRequestType,\n                requiresData?: boolean): ApiEdge;\n    entryMethod(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                acceptedTypes?: ApiRequestType,\n                parameters?: string[],\n                requiresData?: boolean): ApiEdge;\n    entryMethod(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                acceptedTypes: ApiRequestType = ApiRequestType.Any,\n                parametersOrData: string[]|boolean = [],\n                requiresData = true): ApiEdge {\n        if(this.methods.find((method: ApiEdgeMethod) =>\n            method.name === name &&\n            (method.scope == ApiEdgeMethodScope.Entry || method.scope == ApiEdgeMethodScope.Edge)))\n            throw \"An entry method with the same name already exists.\";\n\n        this.methods.push(new ApiEdgeMethod(name, execute, ApiEdgeMethodScope.Entry, acceptedTypes, parametersOrData, requiresData));\n        return this\n    };\n    \n    method(options: ApiEdgeMethodOptions) {\n        if(this.methods.find((method: ApiEdgeMethod) => method.name === options.name)) {\n            throw \"A method with the same name already exists.\";\n        }\n\n        this.methods.push(new ApiEdgeMethod(options));\n        return this\n    }\n\n    private extension: { [key: string]: any } = {};\n    get = (key: string) => this.extension[key];\n    set = (key: string, value: any) => this.extension[key] = value;\n\n    buildQuery(type: ApiEdgeQueryType = ApiEdgeQueryType.Get, body: any = null) {\n        return new ApiEdgeQuery(this, type, new ApiEdgeQueryContext(), body)\n    }\n}"]}