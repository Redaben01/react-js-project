{"version":3,"file":"ApiEdgeMethod.js","sourceRoot":"","sources":["../../../src/edge/ApiEdgeMethod.ts"],"names":[],"mappings":";;;AACA,sDAAqD;AAErD,wDAAmD;AAEnD,IAAY,kBAiBX;AAjBD,WAAY,kBAAkB;IAK1B,2DAAQ,CAAA;IAKR,6DAAS,CAAA;IAKT,uEAAc,CAAA;AAElB,CAAC,EAjBW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAiB7B;AAED,IAAY,mBAMX;AAND,WAAY,mBAAmB;IAE3B,+DAAS,CAAA;IAET,6DAAQ,CAAA;AAEZ,CAAC,EANW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAM9B;AAYD,MAAa,aAAa;IA2BtB,YAAY,aAA0C,EAC1C,OAAiE,EACjE,QAA4B,kBAAkB,CAAC,IAAI,EACnD,gBAAgC,2BAAc,CAAC,GAAG,EAClD,mBAAqC,EAAE,EACvC,YAAY,GAAG,IAAI;QA7B/B,kBAAa,GAAmB,2BAAc,CAAC,GAAG,CAAC;QACnD,UAAK,GAAuB,kBAAkB,CAAC,IAAI,CAAC;QACpD,WAAM,GAAwB,mBAAmB,CAAC,KAAK,CAAC;QA6BpD,IAAG,OAAO,aAAa,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,OAAO,aAAa,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;YACxG,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,aAAa,IAAI,2BAAc,CAAC,GAAG,CAAC;YACvE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,kBAAkB,CAAC,IAAI,CAAC;YAC5D,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,IAAI,mBAAmB,CAAC,KAAK,CAAC;YAChE,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;YACrC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAA;SACnD;aACI;YACD,IAAI,UAAU,GAAa,EAAE,CAAC;YAC9B,IAAI,OAAO,gBAAgB,KAAK,SAAS;gBAAE,YAAY,GAAG,gBAAgB,CAAC;;gBACtE,UAAU,GAAG,gBAAgB,CAAC;YAEnC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;YAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,2BAAY,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC3F,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SAChC;IACL,CAAC;CACJ;AAxDD,sCAwDC","sourcesContent":["import {ApiQueryScope} from \"../query/ApiQuery\";\nimport {ApiRequestType} from \"../request/ApiRequest\";\nimport {ApiEdgeQueryResponse} from \"./ApiEdgeQueryResponse\";\nimport {ApiEdgeError} from \"../query/ApiEdgeError\";\n\nexport enum ApiEdgeMethodScope {\n\n    /**\n     * Available for both entries and collections.\n     */\n    Edge = 1,\n\n    /**\n     * Available for single entries.\n     */\n    Entry = 2,\n\n    /**\n     * Available for collections.\n     */\n    Collection = 3\n\n}\n\nexport enum ApiEdgeMethodOutput {\n\n    Entry = 1,\n\n    List = 2\n\n}\n\nexport type ApiEdgeMethodOptions = {\n    name: string;\n    requiresData?: boolean;\n    acceptedTypes?: ApiRequestType;\n    scope?: ApiEdgeMethodScope;\n    output?: ApiEdgeMethodOutput;\n    execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>;\n    parameters?: string[];\n}\n\nexport class ApiEdgeMethod {\n    name: string;\n    requiresData: boolean;\n    acceptedTypes: ApiRequestType = ApiRequestType.Any;\n    scope: ApiEdgeMethodScope = ApiEdgeMethodScope.Edge;\n    output: ApiEdgeMethodOutput = ApiEdgeMethodOutput.Entry;\n    execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>;\n    parameters: string[];\n\n    constructor(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                scope?: ApiEdgeMethodScope,\n                acceptedTypes?: ApiRequestType,\n                requiresData?: boolean);\n    constructor(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                scope?: ApiEdgeMethodScope,\n                acceptedTypes?: ApiRequestType,\n                parameters?: string[],\n                requiresData?: boolean);\n    constructor(name: string,\n                execute: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                scope: ApiEdgeMethodScope,\n                acceptedTypes: ApiRequestType,\n                parametersOrData: string[]|boolean,\n                requiresData: boolean);\n    constructor(options: ApiEdgeMethodOptions);\n    constructor(nameOrOptions: string|ApiEdgeMethodOptions,\n                execute?: (scope: ApiQueryScope) => Promise<ApiEdgeQueryResponse>,\n                scope: ApiEdgeMethodScope = ApiEdgeMethodScope.Edge,\n                acceptedTypes: ApiRequestType = ApiRequestType.Any,\n                parametersOrData: string[]|boolean = [],\n                requiresData = true) {\n\n        if(typeof nameOrOptions === 'object') {\n            this.name = nameOrOptions.name;\n            this.requiresData = typeof nameOrOptions.requiresData === 'boolean' ? nameOrOptions.requiresData : true;\n            this.acceptedTypes = nameOrOptions.acceptedTypes || ApiRequestType.Any;\n            this.scope = nameOrOptions.scope || ApiEdgeMethodScope.Edge;\n            this.output = nameOrOptions.output || ApiEdgeMethodOutput.Entry;\n            this.execute = nameOrOptions.execute;\n            this.parameters = nameOrOptions.parameters || []\n        }\n        else {\n            let parameters: string[] = [];\n            if (typeof parametersOrData === 'boolean') requiresData = parametersOrData;\n            else parameters = parametersOrData;\n\n            this.name = nameOrOptions;\n            this.scope = scope;\n            this.execute = execute || (() => Promise.reject(new ApiEdgeError(400, 'Not Implemented')));\n            this.acceptedTypes = acceptedTypes;\n            this.requiresData = requiresData;\n            this.parameters = parameters;\n        }\n    }\n}"]}