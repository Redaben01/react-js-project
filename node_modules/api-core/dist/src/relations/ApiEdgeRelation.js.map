{"version":3,"file":"ApiEdgeRelation.js","sourceRoot":"","sources":["../../../src/relations/ApiEdgeRelation.ts"],"names":[],"mappings":";;;;;;;;;;;;AAca,QAAA,oBAAoB,GAAkD,EAAE,CAAC;AAEtF,MAAsB,eAAe;IAGjC,YAAY,IAAuB,EAAE,EAAqB;QAclD,aAAQ,GAAG,KAAK,CAAC;QACzB,cAAS,GAAe,GAAG,EAAE,GAAE,CAAC,CAAC;QAd7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,QAAQ,CAAC;IACjD,CAAC;IAaD,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;YACpB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;YACpB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI;YAChB,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAA;IACL,CAAC;IAED,MAAM,CAAO,QAAQ,CAAC,GAA4B,EAAE,GAAQ;;YACxD,MAAM,QAAQ,GAAG,4BAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CACzB,MAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAsB,EACxD,MAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAsB,CACzD,CAAC;YACF,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YACrC,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;YACnC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACzB,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YAC/B,OAAO,QAAQ,CAAA;QACnB,CAAC;KAAA;IAEK,OAAO;;YACT,IAAG,IAAI,CAAC,QAAQ;gBAAE,OAAO,IAAI,CAAC;YAE9B,IAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;gBAC1B,IAAG,MAAM,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE;oBACxB,IAAI,CAAC,SAAS,EAAE,CAAC;oBACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,OAAO,IAAI,CAAA;iBACd;aACJ;YAED,OAAO,KAAK,CAAA;QAChB,CAAC;KAAA;CACJ;AA1DD,0CA0DC","sourcesContent":["import {ApiEdgeDefinition} from \"../edge/ApiEdgeDefinition\";\nimport {Api} from \"../Api\";\n\nexport interface ExportedApiEdgeRelation {\n    type: string\n    name: string\n    relationId: string\n    relatedId: string\n    from: string\n    to: string\n    hasPair: boolean;\n}\n\nexport type ApiEdgeRelationConstructor = new (from: ApiEdgeDefinition, to: ApiEdgeDefinition) => ApiEdgeRelation;\nexport const ApiEdgeRelationTypes: { [key: string]: ApiEdgeRelationConstructor } = {};\n\nexport abstract class ApiEdgeRelation {\n    abstract getType(): string;\n\n    constructor(from: ApiEdgeDefinition, to: ApiEdgeDefinition) {\n        this.from = from;\n        this.to = to;\n        this.external = from.external || to.external;\n    }\n\n    name: string;\n    relationId: string;\n    relatedId: string;\n    from: ApiEdgeDefinition;\n    to: ApiEdgeDefinition;\n    hasPair: boolean;\n    readonly external: boolean;\n\n    private resolved = false;\n    onResolve: () => void = () => {};\n\n    toJSON() {\n        return {\n            type: this.getType(),\n            name: this.name,\n            relationId: this.relationId,\n            relatedId: this.relatedId,\n            from: this.from.name,\n            to: this.to.name,\n            hasPair: this.hasPair\n        }\n    }\n\n    static async fromJSON(obj: ExportedApiEdgeRelation, api: Api): Promise<ApiEdgeRelation> {\n        const Relation = ApiEdgeRelationTypes[obj.type];\n        const relation = new Relation(\n            await api.findEdge(obj.from, false) as ApiEdgeDefinition,\n            await api.findEdge(obj.to, false) as ApiEdgeDefinition\n        );\n        relation.relationId = obj.relationId;\n        relation.relatedId = obj.relatedId;\n        relation.name = obj.name;\n        relation.hasPair = obj.hasPair;\n        return relation\n    }\n\n    async resolve() {\n        if(this.resolved) return true;\n\n        if(await this.from.resolve()) {\n            if(await this.to.resolve()) {\n                this.onResolve();\n                this.resolved = true;\n                return true\n            }\n        }\n\n        return false\n    }\n}"]}