{"version":3,"file":"LocalApiResolver.js","sourceRoot":"","sources":["../../../src/resolver/LocalApiResolver.ts"],"names":[],"mappings":"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","sourcesContent":["import {LazyApiEdge} from \"./LazyApiEdge\";\nimport {Api} from \"../Api\";\nimport {ApiResolver} from \"./ApiResolver\";\n\nexport class LocalApiResolver implements ApiResolver {\n    private readonly api: Api;\n\n    constructor(api: Api) {\n        this.api = api\n    }\n\n    resolveEdgeLazy(name: string, plural: boolean) {\n        return this.api.edges.find(plural\n            ? edge => edge.pluralName == name\n            : edge => edge.name == name\n        ) || new LazyApiEdge(this.api, name, plural, () => this.resolveEdge(name, plural))\n    }\n\n    async resolveEdge(name: string, plural: boolean) {\n        const edge = this.api.edges.find(plural\n            ? edge => edge.pluralName == name\n            : edge => edge.name == name\n        );\n        if(edge && !(await edge.resolve())) return undefined;\n        return edge\n    }\n\n    async resolveRelation(name: string) {\n        const relation = this.api.relations.find(relation => relation.name === name);\n        if(relation && !(await relation.resolve())) return undefined;\n        return relation\n    }\n\n    async resolveRelationOfEdge(edge: string, name: string) {\n        const relation = this.api.relations.find(relation =>\n            relation.name === name && (relation.from.name === edge || relation.to.name === edge)\n        );\n        if(relation && !(await relation.resolve())) return undefined;\n        return relation\n    }\n\n    async resolveRelationFrom(edge: string, name: string) {\n        const relation = this.api.relations.find(relation =>\n            relation.name === name && relation.from.name === edge\n        );\n        if(relation && !(await relation.resolve())) return undefined;\n        return relation\n    }\n\n    async resolveRelationTo(edge: string, name: string) {\n        const relation = this.api.relations.find(relation =>\n            relation.name === name && relation.to.name === edge\n        );\n        if(relation && !(await relation.resolve())) return undefined;\n        return relation\n    }\n}\n"]}