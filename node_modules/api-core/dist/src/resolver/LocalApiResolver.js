"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalApiResolver = void 0;
const LazyApiEdge_1 = require("./LazyApiEdge");
class LocalApiResolver {
    constructor(api) {
        this.api = api;
    }
    resolveEdgeLazy(name, plural) {
        return this.api.edges.find(plural
            ? edge => edge.pluralName == name
            : edge => edge.name == name) || new LazyApiEdge_1.LazyApiEdge(this.api, name, plural, () => this.resolveEdge(name, plural));
    }
    resolveEdge(name, plural) {
        return __awaiter(this, void 0, void 0, function* () {
            const edge = this.api.edges.find(plural
                ? edge => edge.pluralName == name
                : edge => edge.name == name);
            if (edge && !(yield edge.resolve()))
                return undefined;
            return edge;
        });
    }
    resolveRelation(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const relation = this.api.relations.find(relation => relation.name === name);
            if (relation && !(yield relation.resolve()))
                return undefined;
            return relation;
        });
    }
    resolveRelationOfEdge(edge, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const relation = this.api.relations.find(relation => relation.name === name && (relation.from.name === edge || relation.to.name === edge));
            if (relation && !(yield relation.resolve()))
                return undefined;
            return relation;
        });
    }
    resolveRelationFrom(edge, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const relation = this.api.relations.find(relation => relation.name === name && relation.from.name === edge);
            if (relation && !(yield relation.resolve()))
                return undefined;
            return relation;
        });
    }
    resolveRelationTo(edge, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const relation = this.api.relations.find(relation => relation.name === name && relation.to.name === edge);
            if (relation && !(yield relation.resolve()))
                return undefined;
            return relation;
        });
    }
}
exports.LocalApiResolver = LocalApiResolver;
//# sourceMappingURL=LocalApiResolver.js.map